// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/ethereum/go-ethereum/ethclient"
	"gitlab.com/TitanInd/hashrouter/api"
	"gitlab.com/TitanInd/hashrouter/app"
	"gitlab.com/TitanInd/hashrouter/config"
	"gitlab.com/TitanInd/hashrouter/contractmanager"
	"gitlab.com/TitanInd/hashrouter/eventbus"
	"gitlab.com/TitanInd/hashrouter/interfaces"
	"gitlab.com/TitanInd/hashrouter/lib"
	"gitlab.com/TitanInd/hashrouter/miner"
	"gitlab.com/TitanInd/hashrouter/tcpserver"
	"go.uber.org/zap"
	"os"
)

// Injectors from main.go:

func InitApp() (*app.App, error) {
	config, err := provideConfig()
	if err != nil {
		return nil, err
	}
	sugaredLogger, err := provideLogger(config)
	if err != nil {
		return nil, err
	}
	tcpServer := provideTCPServer(config, sugaredLogger)
	minerRepo := miner.NewMinerRepo()
	minerController := provideMinerController(config, sugaredLogger, minerRepo)
	server := provideServer(config, sugaredLogger, minerController)
	iEventManager := events.NewEventManager()
	client, err := provideEthClient(config)
	if err != nil {
		return nil, err
	}
	sellerContractManager := provideSellerContractManager(config, iEventManager, client, sugaredLogger)
	appApp := &app.App{
		TCPServer:       tcpServer,
		MinerController: minerController,
		Server:          server,
		ContractManager:   sellerContractManager,
		Logger:          sugaredLogger,
	}
	return appApp, nil
}

// main.go:

const VERSION = "0.01"

func main() {
	appInstance, err := InitApp()
	if err != nil {
		panic(err)
	}

	appInstance.Run()
}

func provideMinerController(cfg *config.Config, l *zap.SugaredLogger, repo *miner.MinerRepo) *miner.MinerController {
	return miner.NewMinerController(cfg.Pool.Address, cfg.Pool.User, cfg.Pool.Password, repo, l)
}

func provideTCPServer(cfg *config.Config, l *zap.SugaredLogger) *tcpserver.TCPServer {
	return tcpserver.NewTCPServer(cfg.Proxy.Address, l)
}

func provideServer(cfg *config.Config, l *zap.SugaredLogger, ph *miner.MinerController) *api.Server {
	return api.NewServer(cfg.Web.Address, l, ph)
}

func provideEthClient(cfg *config.Config) (*ethclient.Client, error) {
	return contractmanager.NewEthClient(cfg.EthNode.Address)
}

func provideSellerContractManager(cfg *config.Config, em interfaces.IEventManager, ethClient *ethclient.Client, logger *zap.SugaredLogger) *contractmanager.SellerContractManager {
	return contractmanager.NewSellerContractManager(logger, em, ethClient, cfg.Contract.Address)
}

func provideLogger(cfg *config.Config) (*zap.SugaredLogger, error) {
	return lib.NewLogger(cfg.Log.Syslog)
}

func provideConfig() (*config.Config, error) {
	var cfg config.Config
	return &cfg, config.LoadConfig(&cfg, &os.Args)
}
